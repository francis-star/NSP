//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace BLL.PhoneWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PhoneWebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class PhoneWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getCityListOperationCompleted;
        
        private System.Threading.SendOrPostCallback userLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback findPwdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMessageListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getComplaintListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getComplaintInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateComplaintOperationCompleted;
        
        private System.Threading.SendOrPostCallback returnButtonOperationCompleted;
        
        private System.Threading.SendOrPostCallback changePwdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSystemInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback feedbackOperationCompleted;
        
        private System.Threading.SendOrPostCallback organizationListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBusinessSortOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBusinessListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBusinessListByGPSOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBusinessInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback savePeaceDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveMediateDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveRegDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetValidateCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckValidateCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback upfilebyteOperationCompleted;
        
        private System.Threading.SendOrPostCallback getShareOperationCompleted;
        
        private System.Threading.SendOrPostCallback getVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUpdateFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback getModelLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCustomerOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PhoneWebService() {
            this.Url = global::BLL.Properties.Settings.Default.BLL_PhoneWebService_PhoneWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getCityListCompletedEventHandler getCityListCompleted;
        
        /// <remarks/>
        public event userLoginCompletedEventHandler userLoginCompleted;
        
        /// <remarks/>
        public event findPwdCompletedEventHandler findPwdCompleted;
        
        /// <remarks/>
        public event getMessageListCompletedEventHandler getMessageListCompleted;
        
        /// <remarks/>
        public event getComplaintListCompletedEventHandler getComplaintListCompleted;
        
        /// <remarks/>
        public event getComplaintInfoCompletedEventHandler getComplaintInfoCompleted;
        
        /// <remarks/>
        public event updateComplaintCompletedEventHandler updateComplaintCompleted;
        
        /// <remarks/>
        public event returnButtonCompletedEventHandler returnButtonCompleted;
        
        /// <remarks/>
        public event changePwdCompletedEventHandler changePwdCompleted;
        
        /// <remarks/>
        public event getSystemInfoCompletedEventHandler getSystemInfoCompleted;
        
        /// <remarks/>
        public event feedbackCompletedEventHandler feedbackCompleted;
        
        /// <remarks/>
        public event organizationListCompletedEventHandler organizationListCompleted;
        
        /// <remarks/>
        public event getBusinessSortCompletedEventHandler getBusinessSortCompleted;
        
        /// <remarks/>
        public event getBusinessListCompletedEventHandler getBusinessListCompleted;
        
        /// <remarks/>
        public event getBusinessListByGPSCompletedEventHandler getBusinessListByGPSCompleted;
        
        /// <remarks/>
        public event getBusinessInfoCompletedEventHandler getBusinessInfoCompleted;
        
        /// <remarks/>
        public event savePeaceDataCompletedEventHandler savePeaceDataCompleted;
        
        /// <remarks/>
        public event saveMediateDataCompletedEventHandler saveMediateDataCompleted;
        
        /// <remarks/>
        public event saveRegDataCompletedEventHandler saveRegDataCompleted;
        
        /// <remarks/>
        public event GetValidateCodeCompletedEventHandler GetValidateCodeCompleted;
        
        /// <remarks/>
        public event CheckValidateCodeCompletedEventHandler CheckValidateCodeCompleted;
        
        /// <remarks/>
        public event upfilebyteCompletedEventHandler upfilebyteCompleted;
        
        /// <remarks/>
        public event getShareCompletedEventHandler getShareCompleted;
        
        /// <remarks/>
        public event getVersionCompletedEventHandler getVersionCompleted;
        
        /// <remarks/>
        public event getUpdateFileCompletedEventHandler getUpdateFileCompleted;
        
        /// <remarks/>
        public event getModelLinkCompletedEventHandler getModelLinkCompleted;
        
        /// <remarks/>
        public event AddCustomerCompletedEventHandler AddCustomerCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCityList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getCityList(string strProvince, string key) {
            object[] results = this.Invoke("getCityList", new object[] {
                        strProvince,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCityListAsync(string strProvince, string key) {
            this.getCityListAsync(strProvince, key, null);
        }
        
        /// <remarks/>
        public void getCityListAsync(string strProvince, string key, object userState) {
            if ((this.getCityListOperationCompleted == null)) {
                this.getCityListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCityListOperationCompleted);
            }
            this.InvokeAsync("getCityList", new object[] {
                        strProvince,
                        key}, this.getCityListOperationCompleted, userState);
        }
        
        private void OngetCityListOperationCompleted(object arg) {
            if ((this.getCityListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCityListCompleted(this, new getCityListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/userLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string userLogin(string strName, string strPwd, string key) {
            object[] results = this.Invoke("userLogin", new object[] {
                        strName,
                        strPwd,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void userLoginAsync(string strName, string strPwd, string key) {
            this.userLoginAsync(strName, strPwd, key, null);
        }
        
        /// <remarks/>
        public void userLoginAsync(string strName, string strPwd, string key, object userState) {
            if ((this.userLoginOperationCompleted == null)) {
                this.userLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuserLoginOperationCompleted);
            }
            this.InvokeAsync("userLogin", new object[] {
                        strName,
                        strPwd,
                        key}, this.userLoginOperationCompleted, userState);
        }
        
        private void OnuserLoginOperationCompleted(object arg) {
            if ((this.userLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.userLoginCompleted(this, new userLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/findPwd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string findPwd(string strName, string strPhone, string key) {
            object[] results = this.Invoke("findPwd", new object[] {
                        strName,
                        strPhone,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void findPwdAsync(string strName, string strPhone, string key) {
            this.findPwdAsync(strName, strPhone, key, null);
        }
        
        /// <remarks/>
        public void findPwdAsync(string strName, string strPhone, string key, object userState) {
            if ((this.findPwdOperationCompleted == null)) {
                this.findPwdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindPwdOperationCompleted);
            }
            this.InvokeAsync("findPwd", new object[] {
                        strName,
                        strPhone,
                        key}, this.findPwdOperationCompleted, userState);
        }
        
        private void OnfindPwdOperationCompleted(object arg) {
            if ((this.findPwdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.findPwdCompleted(this, new findPwdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getMessageList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getMessageList(string iType, string strCityName, string key) {
            object[] results = this.Invoke("getMessageList", new object[] {
                        iType,
                        strCityName,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getMessageListAsync(string iType, string strCityName, string key) {
            this.getMessageListAsync(iType, strCityName, key, null);
        }
        
        /// <remarks/>
        public void getMessageListAsync(string iType, string strCityName, string key, object userState) {
            if ((this.getMessageListOperationCompleted == null)) {
                this.getMessageListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMessageListOperationCompleted);
            }
            this.InvokeAsync("getMessageList", new object[] {
                        iType,
                        strCityName,
                        key}, this.getMessageListOperationCompleted, userState);
        }
        
        private void OngetMessageListOperationCompleted(object arg) {
            if ((this.getMessageListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMessageListCompleted(this, new getMessageListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getComplaintList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getComplaintList(string iType, string depa_Code, string key) {
            object[] results = this.Invoke("getComplaintList", new object[] {
                        iType,
                        depa_Code,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getComplaintListAsync(string iType, string depa_Code, string key) {
            this.getComplaintListAsync(iType, depa_Code, key, null);
        }
        
        /// <remarks/>
        public void getComplaintListAsync(string iType, string depa_Code, string key, object userState) {
            if ((this.getComplaintListOperationCompleted == null)) {
                this.getComplaintListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetComplaintListOperationCompleted);
            }
            this.InvokeAsync("getComplaintList", new object[] {
                        iType,
                        depa_Code,
                        key}, this.getComplaintListOperationCompleted, userState);
        }
        
        private void OngetComplaintListOperationCompleted(object arg) {
            if ((this.getComplaintListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getComplaintListCompleted(this, new getComplaintListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getComplaintInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getComplaintInfo(string strAppe_Code, string key) {
            object[] results = this.Invoke("getComplaintInfo", new object[] {
                        strAppe_Code,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getComplaintInfoAsync(string strAppe_Code, string key) {
            this.getComplaintInfoAsync(strAppe_Code, key, null);
        }
        
        /// <remarks/>
        public void getComplaintInfoAsync(string strAppe_Code, string key, object userState) {
            if ((this.getComplaintInfoOperationCompleted == null)) {
                this.getComplaintInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetComplaintInfoOperationCompleted);
            }
            this.InvokeAsync("getComplaintInfo", new object[] {
                        strAppe_Code,
                        key}, this.getComplaintInfoOperationCompleted, userState);
        }
        
        private void OngetComplaintInfoOperationCompleted(object arg) {
            if ((this.getComplaintInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getComplaintInfoCompleted(this, new getComplaintInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateComplaint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string updateComplaint(string strAppe_Code, string iType, string APPID, string SIGNATURE, string TIMESTAMP) {
            object[] results = this.Invoke("updateComplaint", new object[] {
                        strAppe_Code,
                        iType,
                        APPID,
                        SIGNATURE,
                        TIMESTAMP});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateComplaintAsync(string strAppe_Code, string iType, string APPID, string SIGNATURE, string TIMESTAMP) {
            this.updateComplaintAsync(strAppe_Code, iType, APPID, SIGNATURE, TIMESTAMP, null);
        }
        
        /// <remarks/>
        public void updateComplaintAsync(string strAppe_Code, string iType, string APPID, string SIGNATURE, string TIMESTAMP, object userState) {
            if ((this.updateComplaintOperationCompleted == null)) {
                this.updateComplaintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateComplaintOperationCompleted);
            }
            this.InvokeAsync("updateComplaint", new object[] {
                        strAppe_Code,
                        iType,
                        APPID,
                        SIGNATURE,
                        TIMESTAMP}, this.updateComplaintOperationCompleted, userState);
        }
        
        private void OnupdateComplaintOperationCompleted(object arg) {
            if ((this.updateComplaintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateComplaintCompleted(this, new updateComplaintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/returnButton", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string returnButton(string strAppe_Code, string strUserName, string content, string key) {
            object[] results = this.Invoke("returnButton", new object[] {
                        strAppe_Code,
                        strUserName,
                        content,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void returnButtonAsync(string strAppe_Code, string strUserName, string content, string key) {
            this.returnButtonAsync(strAppe_Code, strUserName, content, key, null);
        }
        
        /// <remarks/>
        public void returnButtonAsync(string strAppe_Code, string strUserName, string content, string key, object userState) {
            if ((this.returnButtonOperationCompleted == null)) {
                this.returnButtonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreturnButtonOperationCompleted);
            }
            this.InvokeAsync("returnButton", new object[] {
                        strAppe_Code,
                        strUserName,
                        content,
                        key}, this.returnButtonOperationCompleted, userState);
        }
        
        private void OnreturnButtonOperationCompleted(object arg) {
            if ((this.returnButtonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.returnButtonCompleted(this, new returnButtonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changePwd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string changePwd(string uCode, string strOldPwd, string strNewPwd, string key) {
            object[] results = this.Invoke("changePwd", new object[] {
                        uCode,
                        strOldPwd,
                        strNewPwd,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void changePwdAsync(string uCode, string strOldPwd, string strNewPwd, string key) {
            this.changePwdAsync(uCode, strOldPwd, strNewPwd, key, null);
        }
        
        /// <remarks/>
        public void changePwdAsync(string uCode, string strOldPwd, string strNewPwd, string key, object userState) {
            if ((this.changePwdOperationCompleted == null)) {
                this.changePwdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangePwdOperationCompleted);
            }
            this.InvokeAsync("changePwd", new object[] {
                        uCode,
                        strOldPwd,
                        strNewPwd,
                        key}, this.changePwdOperationCompleted, userState);
        }
        
        private void OnchangePwdOperationCompleted(object arg) {
            if ((this.changePwdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changePwdCompleted(this, new changePwdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getSystemInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getSystemInfo(string strCity, string key) {
            object[] results = this.Invoke("getSystemInfo", new object[] {
                        strCity,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSystemInfoAsync(string strCity, string key) {
            this.getSystemInfoAsync(strCity, key, null);
        }
        
        /// <remarks/>
        public void getSystemInfoAsync(string strCity, string key, object userState) {
            if ((this.getSystemInfoOperationCompleted == null)) {
                this.getSystemInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSystemInfoOperationCompleted);
            }
            this.InvokeAsync("getSystemInfo", new object[] {
                        strCity,
                        key}, this.getSystemInfoOperationCompleted, userState);
        }
        
        private void OngetSystemInfoOperationCompleted(object arg) {
            if ((this.getSystemInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSystemInfoCompleted(this, new getSystemInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/feedback", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string feedback(string strAdvince, string strPhone, string key) {
            object[] results = this.Invoke("feedback", new object[] {
                        strAdvince,
                        strPhone,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void feedbackAsync(string strAdvince, string strPhone, string key) {
            this.feedbackAsync(strAdvince, strPhone, key, null);
        }
        
        /// <remarks/>
        public void feedbackAsync(string strAdvince, string strPhone, string key, object userState) {
            if ((this.feedbackOperationCompleted == null)) {
                this.feedbackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfeedbackOperationCompleted);
            }
            this.InvokeAsync("feedback", new object[] {
                        strAdvince,
                        strPhone,
                        key}, this.feedbackOperationCompleted, userState);
        }
        
        private void OnfeedbackOperationCompleted(object arg) {
            if ((this.feedbackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.feedbackCompleted(this, new feedbackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/organizationList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string organizationList(string strCityCode, string key) {
            object[] results = this.Invoke("organizationList", new object[] {
                        strCityCode,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void organizationListAsync(string strCityCode, string key) {
            this.organizationListAsync(strCityCode, key, null);
        }
        
        /// <remarks/>
        public void organizationListAsync(string strCityCode, string key, object userState) {
            if ((this.organizationListOperationCompleted == null)) {
                this.organizationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnorganizationListOperationCompleted);
            }
            this.InvokeAsync("organizationList", new object[] {
                        strCityCode,
                        key}, this.organizationListOperationCompleted, userState);
        }
        
        private void OnorganizationListOperationCompleted(object arg) {
            if ((this.organizationListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.organizationListCompleted(this, new organizationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getBusinessSort", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getBusinessSort(string key) {
            object[] results = this.Invoke("getBusinessSort", new object[] {
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getBusinessSortAsync(string key) {
            this.getBusinessSortAsync(key, null);
        }
        
        /// <remarks/>
        public void getBusinessSortAsync(string key, object userState) {
            if ((this.getBusinessSortOperationCompleted == null)) {
                this.getBusinessSortOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBusinessSortOperationCompleted);
            }
            this.InvokeAsync("getBusinessSort", new object[] {
                        key}, this.getBusinessSortOperationCompleted, userState);
        }
        
        private void OngetBusinessSortOperationCompleted(object arg) {
            if ((this.getBusinessSortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBusinessSortCompleted(this, new getBusinessSortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getBusinessList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getBusinessList(string strType, string strLevel, string strCityCode, string key) {
            object[] results = this.Invoke("getBusinessList", new object[] {
                        strType,
                        strLevel,
                        strCityCode,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getBusinessListAsync(string strType, string strLevel, string strCityCode, string key) {
            this.getBusinessListAsync(strType, strLevel, strCityCode, key, null);
        }
        
        /// <remarks/>
        public void getBusinessListAsync(string strType, string strLevel, string strCityCode, string key, object userState) {
            if ((this.getBusinessListOperationCompleted == null)) {
                this.getBusinessListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBusinessListOperationCompleted);
            }
            this.InvokeAsync("getBusinessList", new object[] {
                        strType,
                        strLevel,
                        strCityCode,
                        key}, this.getBusinessListOperationCompleted, userState);
        }
        
        private void OngetBusinessListOperationCompleted(object arg) {
            if ((this.getBusinessListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBusinessListCompleted(this, new getBusinessListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getBusinessListByGPS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getBusinessListByGPS(string strType, string strLevel, string strCityCode, string depa_Longitude, string depa_Latitude, string key) {
            object[] results = this.Invoke("getBusinessListByGPS", new object[] {
                        strType,
                        strLevel,
                        strCityCode,
                        depa_Longitude,
                        depa_Latitude,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getBusinessListByGPSAsync(string strType, string strLevel, string strCityCode, string depa_Longitude, string depa_Latitude, string key) {
            this.getBusinessListByGPSAsync(strType, strLevel, strCityCode, depa_Longitude, depa_Latitude, key, null);
        }
        
        /// <remarks/>
        public void getBusinessListByGPSAsync(string strType, string strLevel, string strCityCode, string depa_Longitude, string depa_Latitude, string key, object userState) {
            if ((this.getBusinessListByGPSOperationCompleted == null)) {
                this.getBusinessListByGPSOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBusinessListByGPSOperationCompleted);
            }
            this.InvokeAsync("getBusinessListByGPS", new object[] {
                        strType,
                        strLevel,
                        strCityCode,
                        depa_Longitude,
                        depa_Latitude,
                        key}, this.getBusinessListByGPSOperationCompleted, userState);
        }
        
        private void OngetBusinessListByGPSOperationCompleted(object arg) {
            if ((this.getBusinessListByGPSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBusinessListByGPSCompleted(this, new getBusinessListByGPSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getBusinessInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getBusinessInfo(string strBusCode, string key) {
            object[] results = this.Invoke("getBusinessInfo", new object[] {
                        strBusCode,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getBusinessInfoAsync(string strBusCode, string key) {
            this.getBusinessInfoAsync(strBusCode, key, null);
        }
        
        /// <remarks/>
        public void getBusinessInfoAsync(string strBusCode, string key, object userState) {
            if ((this.getBusinessInfoOperationCompleted == null)) {
                this.getBusinessInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBusinessInfoOperationCompleted);
            }
            this.InvokeAsync("getBusinessInfo", new object[] {
                        strBusCode,
                        key}, this.getBusinessInfoOperationCompleted, userState);
        }
        
        private void OngetBusinessInfoOperationCompleted(object arg) {
            if ((this.getBusinessInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBusinessInfoCompleted(this, new getBusinessInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/savePeaceData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string savePeaceData(string cp_Appe_Code, string cp_Results, string cp_PeaceTime, decimal cp_DispMoney, decimal cp_ActMoney, string cp_Attn, string cp_AttnPhone, string cp_Head, string cp_HeadPhone, string cp_Process, string cp_Reason, string u_Name, string xDepa_Code, string xDepa_Name, string key) {
            object[] results = this.Invoke("savePeaceData", new object[] {
                        cp_Appe_Code,
                        cp_Results,
                        cp_PeaceTime,
                        cp_DispMoney,
                        cp_ActMoney,
                        cp_Attn,
                        cp_AttnPhone,
                        cp_Head,
                        cp_HeadPhone,
                        cp_Process,
                        cp_Reason,
                        u_Name,
                        xDepa_Code,
                        xDepa_Name,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void savePeaceDataAsync(string cp_Appe_Code, string cp_Results, string cp_PeaceTime, decimal cp_DispMoney, decimal cp_ActMoney, string cp_Attn, string cp_AttnPhone, string cp_Head, string cp_HeadPhone, string cp_Process, string cp_Reason, string u_Name, string xDepa_Code, string xDepa_Name, string key) {
            this.savePeaceDataAsync(cp_Appe_Code, cp_Results, cp_PeaceTime, cp_DispMoney, cp_ActMoney, cp_Attn, cp_AttnPhone, cp_Head, cp_HeadPhone, cp_Process, cp_Reason, u_Name, xDepa_Code, xDepa_Name, key, null);
        }
        
        /// <remarks/>
        public void savePeaceDataAsync(
                    string cp_Appe_Code, 
                    string cp_Results, 
                    string cp_PeaceTime, 
                    decimal cp_DispMoney, 
                    decimal cp_ActMoney, 
                    string cp_Attn, 
                    string cp_AttnPhone, 
                    string cp_Head, 
                    string cp_HeadPhone, 
                    string cp_Process, 
                    string cp_Reason, 
                    string u_Name, 
                    string xDepa_Code, 
                    string xDepa_Name, 
                    string key, 
                    object userState) {
            if ((this.savePeaceDataOperationCompleted == null)) {
                this.savePeaceDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsavePeaceDataOperationCompleted);
            }
            this.InvokeAsync("savePeaceData", new object[] {
                        cp_Appe_Code,
                        cp_Results,
                        cp_PeaceTime,
                        cp_DispMoney,
                        cp_ActMoney,
                        cp_Attn,
                        cp_AttnPhone,
                        cp_Head,
                        cp_HeadPhone,
                        cp_Process,
                        cp_Reason,
                        u_Name,
                        xDepa_Code,
                        xDepa_Name,
                        key}, this.savePeaceDataOperationCompleted, userState);
        }
        
        private void OnsavePeaceDataOperationCompleted(object arg) {
            if ((this.savePeaceDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.savePeaceDataCompleted(this, new savePeaceDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/saveMediateData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string saveMediateData(
                    string feed_Appe_Code, 
                    string feed_MediateResult, 
                    string feed_MediateDate, 
                    string feed_TortType, 
                    string feed_MediateBookNum, 
                    string feed_NoPerform, 
                    decimal feed_DisputeMoney, 
                    decimal feed_RedeemLoss, 
                    string feed_CheatSign, 
                    decimal feed_DoubleMoney, 
                    decimal feed_SpiritMoney, 
                    string feed_TransDepa, 
                    string feed_AcceptType, 
                    string feed_HelpType, 
                    string feed_AgentPer, 
                    string feed_State, 
                    string feed_AgentPhone, 
                    string feed_Content, 
                    string feed_NotReason, 
                    string feed_RightsNext, 
                    string feed_IsPunish, 
                    string u_Name, 
                    string xDepa_Code, 
                    string xDepa_Name, 
                    string key) {
            object[] results = this.Invoke("saveMediateData", new object[] {
                        feed_Appe_Code,
                        feed_MediateResult,
                        feed_MediateDate,
                        feed_TortType,
                        feed_MediateBookNum,
                        feed_NoPerform,
                        feed_DisputeMoney,
                        feed_RedeemLoss,
                        feed_CheatSign,
                        feed_DoubleMoney,
                        feed_SpiritMoney,
                        feed_TransDepa,
                        feed_AcceptType,
                        feed_HelpType,
                        feed_AgentPer,
                        feed_State,
                        feed_AgentPhone,
                        feed_Content,
                        feed_NotReason,
                        feed_RightsNext,
                        feed_IsPunish,
                        u_Name,
                        xDepa_Code,
                        xDepa_Name,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void saveMediateDataAsync(
                    string feed_Appe_Code, 
                    string feed_MediateResult, 
                    string feed_MediateDate, 
                    string feed_TortType, 
                    string feed_MediateBookNum, 
                    string feed_NoPerform, 
                    decimal feed_DisputeMoney, 
                    decimal feed_RedeemLoss, 
                    string feed_CheatSign, 
                    decimal feed_DoubleMoney, 
                    decimal feed_SpiritMoney, 
                    string feed_TransDepa, 
                    string feed_AcceptType, 
                    string feed_HelpType, 
                    string feed_AgentPer, 
                    string feed_State, 
                    string feed_AgentPhone, 
                    string feed_Content, 
                    string feed_NotReason, 
                    string feed_RightsNext, 
                    string feed_IsPunish, 
                    string u_Name, 
                    string xDepa_Code, 
                    string xDepa_Name, 
                    string key) {
            this.saveMediateDataAsync(feed_Appe_Code, feed_MediateResult, feed_MediateDate, feed_TortType, feed_MediateBookNum, feed_NoPerform, feed_DisputeMoney, feed_RedeemLoss, feed_CheatSign, feed_DoubleMoney, feed_SpiritMoney, feed_TransDepa, feed_AcceptType, feed_HelpType, feed_AgentPer, feed_State, feed_AgentPhone, feed_Content, feed_NotReason, feed_RightsNext, feed_IsPunish, u_Name, xDepa_Code, xDepa_Name, key, null);
        }
        
        /// <remarks/>
        public void saveMediateDataAsync(
                    string feed_Appe_Code, 
                    string feed_MediateResult, 
                    string feed_MediateDate, 
                    string feed_TortType, 
                    string feed_MediateBookNum, 
                    string feed_NoPerform, 
                    decimal feed_DisputeMoney, 
                    decimal feed_RedeemLoss, 
                    string feed_CheatSign, 
                    decimal feed_DoubleMoney, 
                    decimal feed_SpiritMoney, 
                    string feed_TransDepa, 
                    string feed_AcceptType, 
                    string feed_HelpType, 
                    string feed_AgentPer, 
                    string feed_State, 
                    string feed_AgentPhone, 
                    string feed_Content, 
                    string feed_NotReason, 
                    string feed_RightsNext, 
                    string feed_IsPunish, 
                    string u_Name, 
                    string xDepa_Code, 
                    string xDepa_Name, 
                    string key, 
                    object userState) {
            if ((this.saveMediateDataOperationCompleted == null)) {
                this.saveMediateDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveMediateDataOperationCompleted);
            }
            this.InvokeAsync("saveMediateData", new object[] {
                        feed_Appe_Code,
                        feed_MediateResult,
                        feed_MediateDate,
                        feed_TortType,
                        feed_MediateBookNum,
                        feed_NoPerform,
                        feed_DisputeMoney,
                        feed_RedeemLoss,
                        feed_CheatSign,
                        feed_DoubleMoney,
                        feed_SpiritMoney,
                        feed_TransDepa,
                        feed_AcceptType,
                        feed_HelpType,
                        feed_AgentPer,
                        feed_State,
                        feed_AgentPhone,
                        feed_Content,
                        feed_NotReason,
                        feed_RightsNext,
                        feed_IsPunish,
                        u_Name,
                        xDepa_Code,
                        xDepa_Name,
                        key}, this.saveMediateDataOperationCompleted, userState);
        }
        
        private void OnsaveMediateDataOperationCompleted(object arg) {
            if ((this.saveMediateDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveMediateDataCompleted(this, new saveMediateDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/saveRegData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string saveRegData(
                    string ca_Area, 
                    string ca_BS_Name, 
                    string ca_BS_Tel, 
                    string ca_BS_Address, 
                    string ca_TS_Name, 
                    string ca_TS_Type, 
                    string ca_TS_Sex, 
                    string ca_TS_Phone, 
                    string ca_TS_Tel, 
                    string ca_TS_Email, 
                    string ca_SP_Name, 
                    string ca_SP_Brand, 
                    string ca_SP_Price, 
                    string ca_SP_ConsuTime, 
                    string ca_SP_DamTime, 
                    string ca_SP_Content, 
                    string cA_SP_FJ1, 
                    string cA_SP_FJ2, 
                    string cA_SP_FJ3, 
                    string key) {
            object[] results = this.Invoke("saveRegData", new object[] {
                        ca_Area,
                        ca_BS_Name,
                        ca_BS_Tel,
                        ca_BS_Address,
                        ca_TS_Name,
                        ca_TS_Type,
                        ca_TS_Sex,
                        ca_TS_Phone,
                        ca_TS_Tel,
                        ca_TS_Email,
                        ca_SP_Name,
                        ca_SP_Brand,
                        ca_SP_Price,
                        ca_SP_ConsuTime,
                        ca_SP_DamTime,
                        ca_SP_Content,
                        cA_SP_FJ1,
                        cA_SP_FJ2,
                        cA_SP_FJ3,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void saveRegDataAsync(
                    string ca_Area, 
                    string ca_BS_Name, 
                    string ca_BS_Tel, 
                    string ca_BS_Address, 
                    string ca_TS_Name, 
                    string ca_TS_Type, 
                    string ca_TS_Sex, 
                    string ca_TS_Phone, 
                    string ca_TS_Tel, 
                    string ca_TS_Email, 
                    string ca_SP_Name, 
                    string ca_SP_Brand, 
                    string ca_SP_Price, 
                    string ca_SP_ConsuTime, 
                    string ca_SP_DamTime, 
                    string ca_SP_Content, 
                    string cA_SP_FJ1, 
                    string cA_SP_FJ2, 
                    string cA_SP_FJ3, 
                    string key) {
            this.saveRegDataAsync(ca_Area, ca_BS_Name, ca_BS_Tel, ca_BS_Address, ca_TS_Name, ca_TS_Type, ca_TS_Sex, ca_TS_Phone, ca_TS_Tel, ca_TS_Email, ca_SP_Name, ca_SP_Brand, ca_SP_Price, ca_SP_ConsuTime, ca_SP_DamTime, ca_SP_Content, cA_SP_FJ1, cA_SP_FJ2, cA_SP_FJ3, key, null);
        }
        
        /// <remarks/>
        public void saveRegDataAsync(
                    string ca_Area, 
                    string ca_BS_Name, 
                    string ca_BS_Tel, 
                    string ca_BS_Address, 
                    string ca_TS_Name, 
                    string ca_TS_Type, 
                    string ca_TS_Sex, 
                    string ca_TS_Phone, 
                    string ca_TS_Tel, 
                    string ca_TS_Email, 
                    string ca_SP_Name, 
                    string ca_SP_Brand, 
                    string ca_SP_Price, 
                    string ca_SP_ConsuTime, 
                    string ca_SP_DamTime, 
                    string ca_SP_Content, 
                    string cA_SP_FJ1, 
                    string cA_SP_FJ2, 
                    string cA_SP_FJ3, 
                    string key, 
                    object userState) {
            if ((this.saveRegDataOperationCompleted == null)) {
                this.saveRegDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveRegDataOperationCompleted);
            }
            this.InvokeAsync("saveRegData", new object[] {
                        ca_Area,
                        ca_BS_Name,
                        ca_BS_Tel,
                        ca_BS_Address,
                        ca_TS_Name,
                        ca_TS_Type,
                        ca_TS_Sex,
                        ca_TS_Phone,
                        ca_TS_Tel,
                        ca_TS_Email,
                        ca_SP_Name,
                        ca_SP_Brand,
                        ca_SP_Price,
                        ca_SP_ConsuTime,
                        ca_SP_DamTime,
                        ca_SP_Content,
                        cA_SP_FJ1,
                        cA_SP_FJ2,
                        cA_SP_FJ3,
                        key}, this.saveRegDataOperationCompleted, userState);
        }
        
        private void OnsaveRegDataOperationCompleted(object arg) {
            if ((this.saveRegDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveRegDataCompleted(this, new saveRegDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetValidateCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetValidateCode(string APPID, string SIGNATURE, string TIMESTAMP, string iPhone) {
            object[] results = this.Invoke("GetValidateCode", new object[] {
                        APPID,
                        SIGNATURE,
                        TIMESTAMP,
                        iPhone});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetValidateCodeAsync(string APPID, string SIGNATURE, string TIMESTAMP, string iPhone) {
            this.GetValidateCodeAsync(APPID, SIGNATURE, TIMESTAMP, iPhone, null);
        }
        
        /// <remarks/>
        public void GetValidateCodeAsync(string APPID, string SIGNATURE, string TIMESTAMP, string iPhone, object userState) {
            if ((this.GetValidateCodeOperationCompleted == null)) {
                this.GetValidateCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetValidateCodeOperationCompleted);
            }
            this.InvokeAsync("GetValidateCode", new object[] {
                        APPID,
                        SIGNATURE,
                        TIMESTAMP,
                        iPhone}, this.GetValidateCodeOperationCompleted, userState);
        }
        
        private void OnGetValidateCodeOperationCompleted(object arg) {
            if ((this.GetValidateCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetValidateCodeCompleted(this, new GetValidateCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckValidateCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckValidateCode(string iPhone, string ValidateCode, string key) {
            object[] results = this.Invoke("CheckValidateCode", new object[] {
                        iPhone,
                        ValidateCode,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckValidateCodeAsync(string iPhone, string ValidateCode, string key) {
            this.CheckValidateCodeAsync(iPhone, ValidateCode, key, null);
        }
        
        /// <remarks/>
        public void CheckValidateCodeAsync(string iPhone, string ValidateCode, string key, object userState) {
            if ((this.CheckValidateCodeOperationCompleted == null)) {
                this.CheckValidateCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckValidateCodeOperationCompleted);
            }
            this.InvokeAsync("CheckValidateCode", new object[] {
                        iPhone,
                        ValidateCode,
                        key}, this.CheckValidateCodeOperationCompleted, userState);
        }
        
        private void OnCheckValidateCodeOperationCompleted(object arg) {
            if ((this.CheckValidateCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckValidateCodeCompleted(this, new CheckValidateCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/upfilebyte", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string upfilebyte(string FileBase, string ext, string key) {
            object[] results = this.Invoke("upfilebyte", new object[] {
                        FileBase,
                        ext,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void upfilebyteAsync(string FileBase, string ext, string key) {
            this.upfilebyteAsync(FileBase, ext, key, null);
        }
        
        /// <remarks/>
        public void upfilebyteAsync(string FileBase, string ext, string key, object userState) {
            if ((this.upfilebyteOperationCompleted == null)) {
                this.upfilebyteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupfilebyteOperationCompleted);
            }
            this.InvokeAsync("upfilebyte", new object[] {
                        FileBase,
                        ext,
                        key}, this.upfilebyteOperationCompleted, userState);
        }
        
        private void OnupfilebyteOperationCompleted(object arg) {
            if ((this.upfilebyteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.upfilebyteCompleted(this, new upfilebyteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getShare", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getShare(string key) {
            object[] results = this.Invoke("getShare", new object[] {
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getShareAsync(string key) {
            this.getShareAsync(key, null);
        }
        
        /// <remarks/>
        public void getShareAsync(string key, object userState) {
            if ((this.getShareOperationCompleted == null)) {
                this.getShareOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetShareOperationCompleted);
            }
            this.InvokeAsync("getShare", new object[] {
                        key}, this.getShareOperationCompleted, userState);
        }
        
        private void OngetShareOperationCompleted(object arg) {
            if ((this.getShareCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getShareCompleted(this, new getShareCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getVersion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getVersion(string key) {
            object[] results = this.Invoke("getVersion", new object[] {
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getVersionAsync(string key) {
            this.getVersionAsync(key, null);
        }
        
        /// <remarks/>
        public void getVersionAsync(string key, object userState) {
            if ((this.getVersionOperationCompleted == null)) {
                this.getVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVersionOperationCompleted);
            }
            this.InvokeAsync("getVersion", new object[] {
                        key}, this.getVersionOperationCompleted, userState);
        }
        
        private void OngetVersionOperationCompleted(object arg) {
            if ((this.getVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVersionCompleted(this, new getVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getUpdateFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getUpdateFile(string key) {
            object[] results = this.Invoke("getUpdateFile", new object[] {
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUpdateFileAsync(string key) {
            this.getUpdateFileAsync(key, null);
        }
        
        /// <remarks/>
        public void getUpdateFileAsync(string key, object userState) {
            if ((this.getUpdateFileOperationCompleted == null)) {
                this.getUpdateFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUpdateFileOperationCompleted);
            }
            this.InvokeAsync("getUpdateFile", new object[] {
                        key}, this.getUpdateFileOperationCompleted, userState);
        }
        
        private void OngetUpdateFileOperationCompleted(object arg) {
            if ((this.getUpdateFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUpdateFileCompleted(this, new getUpdateFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getModelLink", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getModelLink(string strCityCode, int ModelIndex, string key) {
            object[] results = this.Invoke("getModelLink", new object[] {
                        strCityCode,
                        ModelIndex,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getModelLinkAsync(string strCityCode, int ModelIndex, string key) {
            this.getModelLinkAsync(strCityCode, ModelIndex, key, null);
        }
        
        /// <remarks/>
        public void getModelLinkAsync(string strCityCode, int ModelIndex, string key, object userState) {
            if ((this.getModelLinkOperationCompleted == null)) {
                this.getModelLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetModelLinkOperationCompleted);
            }
            this.InvokeAsync("getModelLink", new object[] {
                        strCityCode,
                        ModelIndex,
                        key}, this.getModelLinkOperationCompleted, userState);
        }
        
        private void OngetModelLinkOperationCompleted(object arg) {
            if ((this.getModelLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getModelLinkCompleted(this, new getModelLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddCustomer(string custCityCode, string custName, string custAddress, string custPhone, string custLinkman, string custLinkPhone) {
            object[] results = this.Invoke("AddCustomer", new object[] {
                        custCityCode,
                        custName,
                        custAddress,
                        custPhone,
                        custLinkman,
                        custLinkPhone});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddCustomerAsync(string custCityCode, string custName, string custAddress, string custPhone, string custLinkman, string custLinkPhone) {
            this.AddCustomerAsync(custCityCode, custName, custAddress, custPhone, custLinkman, custLinkPhone, null);
        }
        
        /// <remarks/>
        public void AddCustomerAsync(string custCityCode, string custName, string custAddress, string custPhone, string custLinkman, string custLinkPhone, object userState) {
            if ((this.AddCustomerOperationCompleted == null)) {
                this.AddCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCustomerOperationCompleted);
            }
            this.InvokeAsync("AddCustomer", new object[] {
                        custCityCode,
                        custName,
                        custAddress,
                        custPhone,
                        custLinkman,
                        custLinkPhone}, this.AddCustomerOperationCompleted, userState);
        }
        
        private void OnAddCustomerOperationCompleted(object arg) {
            if ((this.AddCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCustomerCompleted(this, new AddCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getCityListCompletedEventHandler(object sender, getCityListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCityListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCityListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void userLoginCompletedEventHandler(object sender, userLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class userLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal userLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void findPwdCompletedEventHandler(object sender, findPwdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class findPwdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findPwdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getMessageListCompletedEventHandler(object sender, getMessageListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMessageListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMessageListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getComplaintListCompletedEventHandler(object sender, getComplaintListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getComplaintListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getComplaintListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getComplaintInfoCompletedEventHandler(object sender, getComplaintInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getComplaintInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getComplaintInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateComplaintCompletedEventHandler(object sender, updateComplaintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateComplaintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateComplaintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void returnButtonCompletedEventHandler(object sender, returnButtonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class returnButtonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal returnButtonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changePwdCompletedEventHandler(object sender, changePwdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changePwdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changePwdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getSystemInfoCompletedEventHandler(object sender, getSystemInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSystemInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSystemInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void feedbackCompletedEventHandler(object sender, feedbackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class feedbackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal feedbackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void organizationListCompletedEventHandler(object sender, organizationListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class organizationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal organizationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getBusinessSortCompletedEventHandler(object sender, getBusinessSortCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBusinessSortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBusinessSortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getBusinessListCompletedEventHandler(object sender, getBusinessListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBusinessListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBusinessListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getBusinessListByGPSCompletedEventHandler(object sender, getBusinessListByGPSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBusinessListByGPSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBusinessListByGPSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getBusinessInfoCompletedEventHandler(object sender, getBusinessInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBusinessInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBusinessInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void savePeaceDataCompletedEventHandler(object sender, savePeaceDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class savePeaceDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal savePeaceDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void saveMediateDataCompletedEventHandler(object sender, saveMediateDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveMediateDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveMediateDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void saveRegDataCompletedEventHandler(object sender, saveRegDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveRegDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveRegDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetValidateCodeCompletedEventHandler(object sender, GetValidateCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetValidateCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetValidateCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckValidateCodeCompletedEventHandler(object sender, CheckValidateCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckValidateCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckValidateCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void upfilebyteCompletedEventHandler(object sender, upfilebyteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class upfilebyteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal upfilebyteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getShareCompletedEventHandler(object sender, getShareCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getShareCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getShareCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getVersionCompletedEventHandler(object sender, getVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUpdateFileCompletedEventHandler(object sender, getUpdateFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUpdateFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUpdateFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getModelLinkCompletedEventHandler(object sender, getModelLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getModelLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getModelLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AddCustomerCompletedEventHandler(object sender, AddCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591